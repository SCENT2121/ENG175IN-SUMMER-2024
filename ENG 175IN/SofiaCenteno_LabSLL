#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

// Define the Node structure
typedef struct Node
{
    int data;
    struct Node *next;
} Node;

// Function prototypes
bool nodeExist(int data, Node **head);
void appendNode(int data, Node **head);
void printList(Node *head);
void printListReverse(Node *head);
void reverseLinkedlist(Node **head);
Node* findMiddleNode(Node *head);
void deleteMiddleNode(Node **head);

int main(void)
{
    Node *head = NULL;

    // Test list 1
    appendNode(1, &head);
    appendNode(2, &head);
    appendNode(3, &head);
    appendNode(4, &head);
    appendNode(5, &head);

    printf("Function 1:\n");
    printf("\nOriginal list: ");
    printList(head);
    printf("List in reverse order: ");
    printListReverse(head);
    printf("NULL\n");

    printf("\nFunction 2:\n");
    printf("\nOriginal list: ");
    printList(head);
    printf("Reversing the list...\n");
    reverseLinkedlist(&head);
    printf("Reversed list: ");
    printList(head);

    printf("\nFunction 3:\n");
    Node *middle = findMiddleNode(head);
    printf("\nOriginal List: 1, 2, 3, 4, 5\n");
    printf("Middle node is: %d\n", middle->data);

    // Test list 2
    Node *head2 = NULL;
    appendNode(21, &head2);
    appendNode(44, &head2);
    appendNode(32, &head2);
    appendNode(45, &head2);
    appendNode(5, &head2);
    appendNode(25, &head2);
    
    middle = findMiddleNode(head2);
    printf("\nOriginal List: 21, 44, 32, 45, 5, 25\n");
    printf("Middle node is: %d\n", middle->data);

    Node *head3 = NULL;
    appendNode(1, &head3);
    appendNode(94, &head3);
    appendNode(37, &head3);
    appendNode(4, &head3);
    appendNode(45, &head3);
    appendNode(58, &head3);
    middle = findMiddleNode(head3);
    printf("\nOriginal List: 1, 94, 37, 4, 45, 58\n");
    printf("Middle node is: %d\n", middle->data);

    printf("\nFunction 4:\n");
    printf("\nOriginal List: 1, 2, 3, 4, 5\n");
    deleteMiddleNode(&head);
    printf("Middle node is: 3\n");
    printf("Deleting middle node...\n");
    printf("List after deletion: ");
    printList(head);

    printf("\nOriginal List: 21, 44, 32, 45, 5, 25\n");
    deleteMiddleNode(&head2);
    printf("Middle node is: 45\n");
    printf("Deleting middle node...\n");
    printf("List after deletion: ");
    printList(head2);

    printf("\nOriginal List: 1, 94, 37, 4, 45, 58\n");
    deleteMiddleNode(&head3);
    printf("Middle node is: 37\n");
    printf("Deleting middle node...\n");
    printf("List after deletion: ");
    printList(head3);

    return 0;
}

// This is a helper function which will help us determine if a node exists in the list
bool nodeExist(int data, Node **head)
{
    Node *temp = *head;  // setting temp = to the first element of the list
    while (temp != NULL)
    {
        if (data == temp->data)
        {
            return true;
        }
        temp = temp->next;
    }
    return false;
}

// This function appends a new node with the given data to the end of the list
void appendNode(int data, Node **head)
{
    if (nodeExist(data, head))
    {
        printf("This node already exists in the list\n");
        return;
    }
    
    // Create a new node using dynamic memory allocation
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    // Case 1: Empty list
    if (*head == NULL)
    {
        *head = newNode;
    }
    else
    {
        Node *temp = *head;
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// This function prints the linked list
void printList(Node *head)
{
    Node *temp = head;
    if (head == NULL)
    {
        printf("Empty list\n");
        return;
    }

    while (temp != NULL)
    {
        printf("%d->", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// This function prints the linked list in reverse order
void printListReverse(Node *head)
{
    if (head == NULL)
        return;

    printListReverse(head->next);
    printf("%d->", head->data);
}

// This function reverses the nodes of the linked list
void reverseLinkedlist(Node **head)
{
    Node *prev = NULL;
    Node *current = *head;
    Node *next = NULL;
    while (current != NULL)
    {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;

    // Call printList to display the reversed list
    printList(*head);
}

// This function finds and returns the middle node of the linked list
Node* findMiddleNode(Node *head)
{
    Node *middleTracker = head;
    Node *endTracker = head;
    Node *middlePrev = NULL;

    while (endTracker != NULL && endTracker->next != NULL)
    {
        middlePrev = middleTracker;
        middleTracker = middleTracker->next;
        endTracker = endTracker->next->next;
    }

    // For even number of nodes, return the node with the larger value
    if (middlePrev != NULL && endTracker == NULL)
    {
        // List length is even, return the larger value between middlePrev and middleTracker
        return (middlePrev->data > middleTracker->data) ? middlePrev : middleTracker;
    }

    return middleTracker;
}

// This function deletes the middle node of the linked list
void deleteMiddleNode(Node **head)
{
    if (*head == NULL || (*head)->next == NULL)
        return;

    Node *middleTracker = *head;
    Node *endTracker = *head;
    Node *middlePrev = NULL;

    while (endTracker != NULL && endTracker->next != NULL)
    {
        middlePrev = middleTracker;
        middleTracker = middleTracker->next;
        endTracker = endTracker->next->next;
    }

    if (middlePrev != NULL)
    {
        middlePrev->next = middleTracker->next;
        free(middleTracker);
    }
}
